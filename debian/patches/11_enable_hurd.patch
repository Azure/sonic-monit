Description: Support for GNU/Hurd
Author: Sergey B Kirpichev <skirpichev@gmail.com>
Forwarded: https://bitbucket.org/tildeslash/monit/pull-request/3

 1. Enable building for GNU/Hurd in configure.ac
 2. Fix MAX_PATH use cases
 3. Implement minimal src/{device,process}/sysdep_HURD.c
 4. Minor adaptation of sysdep_LINUX.c: revert _getStartTime() to pre-5.16
    version (function was get_starttime())

---
 configure                            |    6 +++++-
 configure.ac                         |    5 +++++
 libmonit/configure                   |    5 +++++
 libmonit/configure.ac                |    4 ++++
 libmonit/src/Config.h                |    6 ++++++
 libmonit/src/system/Link.c           |    2 ++
 libmonit/src/system/os/hurd/Link.inc |    1 +
 src/device/sysdep_HURD.c             |    1 +
 src/monit.h                          |    5 +++++
 src/process/sysdep_HURD.c            |   20 ++++++++++++++++++++
 src/process/sysdep_LINUX.c           |   11 ++++++++---
 11 files changed, 62 insertions(+), 4 deletions(-)

--- a/configure
+++ b/configure
@@ -15086,7 +15086,11 @@ then
    LIBS="$LIBS -lodm -lperfstat -lm"
 
 $as_echo "#define HAVE_CPU_WAIT 1" >>confdefs.h
-
+elif test "$architecture" = "GNU"
+then
+   ARCH="HURD"
+   CFLAGS="$CFLAGS -D _REENTRANT"
+   LDFLAGS="$LDFLAGS -rdynamic"
 else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Architecture not supported: ${architecture}" >&5
 $as_echo "$as_me: WARNING: Architecture not supported: ${architecture}" >&2;}
--- a/configure.ac
+++ b/configure.ac
@@ -610,6 +610,11 @@ then
    CFLAGS="$CFLAGS -D_THREAD_SAFE -D_REENTRANT"
    LIBS="$LIBS -lodm -lperfstat -lm"
    AC_DEFINE([HAVE_CPU_WAIT], [1], [Define to 1 if CPU wait information is available.])
+elif test "$architecture" = "GNU"
+then
+   ARCH="HURD"
+   CFLAGS="$CFLAGS -D _REENTRANT"
+   LDFLAGS="$LDFLAGS -rdynamic"
 else
    AC_MSG_WARN([Architecture not supported: ${architecture}])
    CFLAGS="$CFLAGS -D _REENTRANT"
--- a/libmonit/configure
+++ b/libmonit/configure
@@ -12749,6 +12749,11 @@ then
 $as_echo "#define AIX 1" >>confdefs.h
 
    LIBS="$LIBS -lcfg -lodm -lperfstat"
+elif test "$architecture" = "GNU"
+then
+    CFLAGS="$CFLAGS -D _REENTRANT"
+
+$as_echo "#define HURD 1" >>confdefs.h
 else
    as_fn_error $? "Architecture not supported: ${architecture}" "$LINENO" 5
 fi
--- a/libmonit/configure.ac
+++ b/libmonit/configure.ac
@@ -246,6 +246,10 @@ then
    CFLAGS="$CFLAGS -D_THREAD_SAFE -D_REENTRANT"
    AC_DEFINE([AIX], 1, [Define to 1 if the system is AIX])
    LIBS="$LIBS -lcfg -lodm -lperfstat"
+elif test "$architecture" = "GNU"
+then
+   CFLAGS="$CFLAGS -D _REENTRANT"
+   AC_DEFINE([HURD], 1, [Define to 1 if the system is Hurd])
 else
    AC_MSG_ERROR([Architecture not supported: ${architecture}])
 fi
--- /dev/null
+++ b/src/device/sysdep_HURD.c
@@ -0,0 +1 @@
+#include "sysdep_LINUX.c"
--- /dev/null
+++ b/src/process/sysdep_HURD.c
@@ -0,0 +1,20 @@
+#include "config.h"
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+/**
+ * On GNU/Hurd procps usually launched with -c (linux-compatibility switch):
+ * http://lists.debian.org/debian-hurd/2012/10/msg00070.html
+ * so, sysconf(_SC_CLK_TCK_) is useless here right now...
+ */
+#ifndef HZ
+# ifndef HURD
+#  define HZ sysconf(_SC_CLK_TCK)
+# else
+#  define HZ 100
+# endif
+#endif
+
+#include "sysdep_LINUX.c"
--- a/libmonit/src/Config.h
+++ b/libmonit/src/Config.h
@@ -126,6 +126,12 @@ typedef enum {
 #define true  1
 #endif
 
+/**
+ * For systems without PATH_MAX define it with a resonable value
+ */
+#ifndef PATH_MAX
+#define PATH_MAX 1024
+#endif
 
 #endif
 
--- a/src/monit.h
+++ b/src/monit.h
@@ -415,6 +415,11 @@ Sigfunc *signal(int signo, Sigfunc * fun
 #define SIG_ERR ((Sigfunc *)-1)
 #endif
 
+/* For systems without PATH_MAX define it with a resonable value */
+
+#ifndef PATH_MAX
+#define PATH_MAX 1024
+#endif
 
 /** ------------------------------------------------- General purpose macros */
 
--- /dev/null
+++ b/libmonit/src/system/os/hurd/Link.inc
@@ -0,0 +1 @@
+#include "../linux/Link.inc"
--- a/libmonit/src/system/Link.c
+++ b/libmonit/src/system/Link.c
@@ -161,6 +161,8 @@ static void _updateValue(LinkData_T *dat
 #include "os/solaris/Link.inc"
 #elif defined AIX
 #include "os/aix/Link.inc"
+#elif defined HURD
+#include "os/hurd/Link.inc"
 #endif
 
 
--- a/src/process/sysdep_LINUX.c
+++ b/src/process/sysdep_LINUX.c
@@ -144,12 +144,17 @@ static double hz = 0.;
  * @return seconds since unix epoch
  */
 static time_t _getStartTime() {
-        struct sysinfo info;
-        if (sysinfo(&info) < 0) {
+        char buf[STRLEN];
+        double up = 0;
+        if (! file_readProc(buf, sizeof(buf), "uptime", -1, NULL)) {
                 LogError("system statistic error -- cannot get system uptime: %s\n", STRERROR);
                 return 0;
         }
-        return Time_now() - info.uptime;
+        if (sscanf(buf, "%lf", &up) != 1) {
+                LogError("system statistic error -- invalid uptime\n", STRERROR);
+                return 0;
+        }
+        return Time_now() - (time_t)up;
 }
 
 
