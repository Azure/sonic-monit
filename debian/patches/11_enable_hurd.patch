Description: Support for GNU/Hurd
Author: Sergey B Kirpichev <skirpichev@gmail.com>
Forwarded: no

 1. Enable building for GNU/Hurd in configure.ac
 2. Fix MAX_PATH use cases, see:
    http://www.gnu.org/software/hurd/hurd/porting/guidelines.html#PATH_MAX_tt_MAX_PATH_tt_MAXPATHL
 3. Implement
    src/device/sysdep_HURD.c
    src/process/sysdep_HURD.c

---
 configure                 |    6 
 configure.ac              |    5 
 libmonit/configure        |    4 
 libmonit/configure.ac     |    4 
 libmonit/test/FileTest.c  |   10 +
 src/device/sysdep_HURD.c  |  135 +++++++++++++
 src/process/sysdep_HURD.c |  456 ++++++++++++++++++++++++++++++++++++++++++++++
 src/validate.c            |   10 -
 8 files changed, 628 insertions(+), 2 deletions(-)

--- a/configure
+++ b/configure
@@ -12821,7 +12821,11 @@
    LIBS="$LIBS -lperfstat"
 
 $as_echo "#define HAVE_CPU_WAIT 1" >>confdefs.h
-
+elif test "$architecture" = "GNU"
+then
+   ARCH="HURD"
+   CFLAGS="$CFLAGS -D _REENTRANT"
+   LDFLAGS="$LDFLAGS -rdynamic"
 else
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Architecture not supported: ${architecture}" >&5
 $as_echo "$as_me: WARNING: Architecture not supported: ${architecture}" >&2;}
--- a/configure.ac
+++ b/configure.ac
@@ -510,6 +510,11 @@
    # AIX v. 5.3
    LIBS="$LIBS -lperfstat"	
    AC_DEFINE([HAVE_CPU_WAIT], [1], [Define to 1 if CPU wait information is available.])
+elif test "$architecture" = "GNU"
+then
+   ARCH="HURD"
+   CFLAGS="$CFLAGS -D _REENTRANT"
+   LDFLAGS="$LDFLAGS -rdynamic"
 else
    AC_MSG_WARN([Architecture not supported: ${architecture}])
    CFLAGS="$CFLAGS -D _REENTRANT"
--- a/libmonit/configure
+++ b/libmonit/configure
@@ -10916,7 +10916,11 @@
    CFLAGS="$CFLAGS -D_THREAD_SAFE -D_REENTRANT"
 
 $as_echo "#define AIX 1" >>confdefs.h
+elif test "$architecture" = "GNU"
+then
+   CFLAGS="$CFLAGS -D _REENTRANT"
 
+$as_echo "#define HURD 1" >>confdefs.h
 else
    as_fn_error "Architecture not supported: ${architecture}" "$LINENO" 5
 fi
--- a/libmonit/configure.ac
+++ b/libmonit/configure.ac
@@ -169,6 +169,10 @@
 then
    CFLAGS="$CFLAGS -D_THREAD_SAFE -D_REENTRANT"
    AC_DEFINE([AIX], 1, [Define to 1 if the system is AIX])
+elif test "$architecture" = "GNU"
+then
+   CFLAGS="$CFLAGS -D _REENTRANT"
+   AC_DEFINE([HURD], 1, [Define to 1 if the system is Hurd])
 else
    AC_MSG_ERROR([Architecture not supported: ${architecture}])
 fi
--- a/libmonit/test/FileTest.c
+++ b/libmonit/test/FileTest.c
@@ -8,6 +8,7 @@
 #include <unistd.h>
 #include <limits.h>
 #include <stdarg.h>
+#include <stdlib.h>
 
 #include "Bootstrap.h"
 #include "Str.h"
@@ -130,14 +131,23 @@
 
         printf("=> Test7: normalize path\n");
         {
+#ifdef PATH_MAX
                 char s[PATH_MAX];
                 assert(File_getRealPath("/././tmp/../tmp", s) != NULL);
+#else
+                char *s = realpath("/././tmp/../tmp", NULL);
+                assert(s != NULL);
+#endif
 #ifdef DARWIN
                 /* On Darwin /tmp is a link to /private/tmp */
                 assert(Str_isEqual(s, "/private/tmp")); 
 #else
                 assert(Str_isEqual(s, "/tmp"));
 #endif
+
+#ifndef PATH_MAX
+                free(s);
+#endif
         }
         printf("=> Test7: OK\n\n");
 
--- a/src/validate.c
+++ b/src/validate.c
@@ -227,7 +227,11 @@
  */
 int check_filesystem(Service_T s) {
         char *p;
+#ifdef PATH_MAX
         char path_buf[PATH_MAX+1];
+#else
+        char *path_buf = NULL;
+#endif
         Filesystem_T td;
         struct stat stat_buf;
 
@@ -241,7 +245,8 @@
                 return FALSE;
         }
         if (S_ISLNK(stat_buf.st_mode)) {
-                if (! realpath(s->path, path_buf)) {
+                p = realpath(s->path, path_buf);
+                if (! p) {
                         Event_post(s, Event_Nonexist, STATE_FAILED, s->action_NONEXIST, "filesystem symbolic link error -- %s", STRERROR);
                         return FALSE;
                 }
@@ -262,6 +267,9 @@
                 Event_post(s, Event_Data, STATE_FAILED, s->action_DATA, "unable to read filesystem %s state", p);
                 return FALSE;
         }
+#ifndef PATH_MAX
+        free(path_buf);
+#endif
         s->inf->priv.filesystem.inode_percent = s->inf->priv.filesystem.f_files > 0 ? (int)((1000.0 * (s->inf->priv.filesystem.f_files - s->inf->priv.filesystem.f_filesfree)) / (float)s->inf->priv.filesystem.f_files) : 0;
         s->inf->priv.filesystem.space_percent = s->inf->priv.filesystem.f_blocks > 0 ? (int)((1000.0 * (s->inf->priv.filesystem.f_blocks - s->inf->priv.filesystem.f_blocksfree)) / (float)s->inf->priv.filesystem.f_blocks) : 0;
         s->inf->priv.filesystem.inode_total   = s->inf->priv.filesystem.f_files - s->inf->priv.filesystem.f_filesfree;
--- /dev/null
+++ b/src/device/sysdep_HURD.c
@@ -0,0 +1,135 @@
+/*
+ * Copyright (C) Tildeslash Ltd. All rights reserved.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License version 3.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * In addition, as a special exception, the copyright holders give
+ * permission to link the code of portions of this program with the
+ * OpenSSL library under certain conditions as described in each
+ * individual source file, and distribute linked combinations
+ * including the two.
+ *
+ * You must obey the GNU Affero General Public License in all respects
+ * for all of the code used other than OpenSSL.
+ */
+
+/*
+
+ HURD note.
+
+ The code below was copy-pasted from sysdep_LINUX.c
+ + PATH_MAX fix
+
+ /etc/mtab was changed to /etc/fstab, see:
+ http://www.gnu.org/software/hurd/community/gsoc/project_ideas/mtab.html
+
+ */
+
+/**
+ *  System dependent filesystem methods.
+ *
+ *  @file
+ */
+
+#include "config.h"
+
+#ifdef HAVE_STDIO_H
+#include <stdio.h>
+#endif
+
+#ifdef HAVE_ERRNO_H
+#include <errno.h>
+#endif
+
+#ifdef HAVE_STRING_H
+#include <string.h>
+#endif
+
+#ifdef HAVE_STRINGS_H
+#include <strings.h>
+#endif
+
+#ifdef HAVE_SYS_STATVFS_H
+# include <sys/statvfs.h>
+#endif
+
+#ifdef HAVE_MNTENT_H
+#include <mntent.h>
+#endif
+
+#include "monit.h"
+#include "device_sysdep.h"
+
+
+/**
+ * Linux special block device mountpoint method. Filesystem must be mounted.
+ * In the case of success, mountpoint is stored in filesystem information
+ * structure for later use.
+ *
+ * @param inf  Information structure where resulting data will be stored
+ * @param blockdev Identifies block special device
+ * @return         NULL in the case of failure otherwise mountpoint
+ */
+char *device_mountpoint_sysdep(Info_T inf, char *blockdev) {
+  FILE *mntfd;
+  struct mntent *mnt;
+
+  ASSERT(inf);
+  ASSERT(blockdev);
+
+  if ((mntfd = setmntent("/etc/fstab", "r")) == NULL) {
+    LogError("%s: Cannot open /etc/fstab file\n", prog);
+    return NULL;
+  }
+  while ((mnt = getmntent(mntfd)) != NULL) {
+    char *realpathbuf = realpath(mnt->mnt_fsname, NULL);
+    /* Try to compare the the filesystem as is, if failed, try to use the symbolic link target */
+    if (IS(blockdev, mnt->mnt_fsname) || (realpathbuf && ! strcasecmp(blockdev, realpathbuf))) {
+      free(realpathbuf);
+      endmntent(mntfd);
+      inf->priv.filesystem.mntpath = Str_dup(mnt->mnt_dir);
+      return inf->priv.filesystem.mntpath;
+    }
+    free(realpathbuf);
+  }
+  endmntent(mntfd);
+  LogError("Device %s not found in /etc/fstab\n", blockdev);
+  return NULL;
+}
+
+
+/**
+ * Linux filesystem usage statistics. In the case of success result is stored in
+ * given information structure.
+ *
+ * @param inf Information structure where resulting data will be stored
+ * @return        TRUE if informations were succesfully read otherwise FALSE
+ */
+int filesystem_usage_sysdep(Info_T inf) {
+  struct statvfs usage;
+
+  ASSERT(inf);
+
+  if (statvfs(inf->priv.filesystem.mntpath, &usage) != 0) {
+    LogError("%s: Error getting usage statistics for filesystem '%s' -- %s\n", prog, inf->priv.filesystem.mntpath, STRERROR);
+    return FALSE;
+  }
+  inf->priv.filesystem.f_bsize =           usage.f_bsize;
+  inf->priv.filesystem.f_blocks =          usage.f_blocks;
+  inf->priv.filesystem.f_blocksfree =      usage.f_bavail;
+  inf->priv.filesystem.f_blocksfreetotal = usage.f_bfree;
+  inf->priv.filesystem.f_files =           usage.f_files;
+  inf->priv.filesystem.f_filesfree =       usage.f_ffree;
+  inf->priv.filesystem.flags =             usage.f_flag;
+  return TRUE;
+}
+
--- /dev/null
+++ b/src/process/sysdep_HURD.c
@@ -0,0 +1,456 @@
+/*
+ * Copyright (C) Tildeslash Ltd. All rights reserved.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License version 3.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * In addition, as a special exception, the copyright holders give
+ * permission to link the code of portions of this program with the
+ * OpenSSL library under certain conditions as described in each
+ * individual source file, and distribute linked combinations
+ * including the two.
+ *
+ * You must obey the GNU Affero General Public License in all respects
+ * for all of the code used other than OpenSSL.
+ */
+
+/*
+ HURD note.
+
+ The code below was copy-pasted from sysdep_LINUX.c
+ with only hack for HZ #define.
+*/
+
+#include "config.h"
+
+#ifdef HAVE_STDIO_H
+#include <stdio.h>
+#endif
+
+#ifdef HAVE_ERRNO_H
+#include <errno.h>
+#endif
+
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+#ifdef HAVE_SYS_STAT_H
+#include <sys/stat.h>
+#endif
+
+#ifdef HAVE_FCNTL_H
+#include <fcntl.h>
+#endif
+
+#ifdef HAVE_STDLIB_H
+#include <stdlib.h>
+#endif
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+#ifdef TIME_WITH_SYS_TIME
+#include <time.h>
+
+#ifdef HAVE_SYS_TIME_H
+#include <sys/time.h>
+#endif
+#else
+#include <time.h>
+#endif
+
+#ifdef HAVE_STRING_H
+#include <string.h>
+#endif
+
+#ifdef HAVE_ASM_PARAM_H
+#include <asm/param.h>
+#endif
+
+#ifdef HAVE_GLOB_H
+#include <glob.h>
+#endif
+
+/*
+
+ On GNU/Hurd procps usually launched with -c (linux-compatibility switch):
+ http://lists.debian.org/debian-hurd/2012/10/msg00070.html
+ so, sysconf(_SC_CLK_TCK_) is useless here right now...
+
+ */
+
+#ifndef HZ
+# ifndef HURD
+#  define HZ sysconf(_SC_CLK_TCK)
+# else
+#  define HZ 100
+# endif
+#endif
+
+#include "monit.h"
+#include "process.h"
+#include "process_sysdep.h"
+
+
+/**
+ *  System dependent resource gathering code for Linux.
+ *
+ *  @file
+ */
+
+
+/* ----------------------------------------------------------------- Private */
+
+
+#define MEMTOTAL  "MemTotal:"
+#define MEMFREE   "MemFree:"
+#define MEMBUF    "Buffers:"
+#define MEMCACHE  "Cached:"
+#define SWAPTOTAL "SwapTotal:"
+#define SWAPFREE  "SwapFree:"
+
+#define NSEC_PER_SEC    1000000000L
+
+static unsigned long long old_cpu_user     = 0;
+static unsigned long long old_cpu_syst     = 0;
+static unsigned long long old_cpu_wait     = 0;
+static unsigned long long old_cpu_total    = 0;
+static int                page_shift_to_kb = 0;
+
+
+/**
+ * Get system start time
+ * @return seconds since unix epoch
+ */
+static time_t get_starttime() {
+  char   buf[1024];
+  double up = 0;
+
+  if (! read_proc_file(buf, 1024, "uptime", -1, NULL)) {
+    LogError("system statistic error -- cannot get system uptime\n");
+    return 0;
+  }
+
+  if (sscanf(buf, "%lf", &up) != 1) {
+    LogError("system statistic error -- invalid uptime\n");
+    return 0;
+  }
+
+  return time(NULL) - (time_t)up;
+}
+
+
+/* ------------------------------------------------------------------ Public */
+
+
+int init_process_info_sysdep(void) {
+  char *ptr;
+  char  buf[1024];
+  long  page_size;
+  int   page_shift;
+
+  if (! read_proc_file(buf, sizeof(buf), "meminfo", -1, NULL))
+    return FALSE;
+  if (! (ptr = strstr(buf, MEMTOTAL))) {
+    DEBUG("system statistic error -- cannot get real memory amount\n");
+    return FALSE;
+  }
+  if (sscanf(ptr+strlen(MEMTOTAL), "%ld", &systeminfo.mem_kbyte_max) != 1) {
+    DEBUG("system statistic error -- cannot get real memory amount\n");
+    return FALSE;
+  }
+
+  if ((systeminfo.cpus = sysconf(_SC_NPROCESSORS_CONF)) < 0) {
+    DEBUG("system statistic error -- cannot get cpu count: %s\n", STRERROR);
+    return FALSE;
+  } else if (systeminfo.cpus == 0) {
+    DEBUG("system reports cpu count 0, setting dummy cpu count 1\n");
+    systeminfo.cpus = 1;
+  }
+
+  if ((page_size = sysconf(_SC_PAGESIZE)) <= 0) {
+    DEBUG("system statistic error -- cannot get page size: %s\n", STRERROR);
+    return FALSE;
+  }
+
+  for (page_shift = 0; page_size != 1; page_size >>= 1, page_shift++);
+  page_shift_to_kb = page_shift - 10;
+
+  return TRUE;
+}
+
+
+/**
+ * Read all processes of the proc files system to initialize
+ * the process tree (sysdep version... but should work for
+ * all procfs based unices)
+ * @param reference  reference of ProcessTree
+ * @return treesize>0 if succeeded otherwise =0.
+ */
+int initprocesstree_sysdep(ProcessTree_T ** reference) {
+  int                 i = 0, j;
+  int                 rv, bytes = 0;
+  int                 treesize = 0;
+  int                 stat_ppid = 0;
+  char               *tmp = NULL;
+  char                procname[STRLEN];
+  char                buf[1024];
+  char                stat_item_state;
+  long                stat_item_cutime = 0;
+  long                stat_item_cstime = 0;
+  long                stat_item_rss = 0;
+  glob_t              globbuf;
+  unsigned long       stat_item_utime = 0;
+  unsigned long       stat_item_stime = 0;
+  unsigned long long  stat_item_starttime = 0ULL;
+  ProcessTree_T      *pt = NULL;
+
+  ASSERT(reference);
+
+  /* Find all processes in the /proc directory */
+  if ((rv = glob("/proc/[0-9]*", GLOB_ONLYDIR, NULL, &globbuf))) {
+    LogError("system statistic error -- glob failed: %d (%s)\n", rv, STRERROR);
+    return FALSE;
+  }
+
+  treesize = globbuf.gl_pathc;
+
+  pt = CALLOC(sizeof(ProcessTree_T), treesize);
+
+  /* Insert data from /proc directory */
+  for (i = 0; i < treesize; i++) {
+
+    pt[i].pid = atoi(globbuf.gl_pathv[i] + strlen("/proc/"));
+
+    if (!read_proc_file(buf, sizeof(buf), "stat", pt[i].pid, NULL)) {
+      DEBUG("system statistic error -- cannot read /proc/%d/stat\n", pt[i].pid);
+      continue;
+    }
+
+    pt[i].time = get_float_time();
+
+    if (!(tmp = strrchr(buf, ')'))) {
+      DEBUG("system statistic error -- file /proc/%d/stat parse error\n", pt[i].pid);
+      continue;
+    }
+    *tmp = 0;
+    if (sscanf(buf, "%*d (%256s", procname) != 1) {
+      DEBUG("system statistic error -- file /proc/%d/stat process name parse error\n", pt[i].pid);
+      continue;
+    }
+
+    tmp += 2;
+
+    /* This implementation is done by using fs/procfs/array.c as a basis
+     * it is also worth looking into the source of the procps utils */
+    if (sscanf(tmp,
+         "%c %d %*d %*d %*d %*d %*u %*u"
+         "%*u %*u %*u %lu %lu %ld %ld %*d %*d %*d "
+         "%*u %llu %*u %ld %*u %*u %*u %*u %*u "
+         "%*u %*u %*u %*u %*u %*u %*u %*u %*d %*d\n",
+         &stat_item_state,
+         &stat_ppid,
+         &stat_item_utime,
+         &stat_item_stime,
+         &stat_item_cutime,
+         &stat_item_cstime,
+         &stat_item_starttime,
+         &stat_item_rss) != 8) {
+      DEBUG("system statistic error -- file /proc/%d/stat parse error\n", pt[i].pid);
+      continue;
+    }
+
+    pt[i].ppid      = stat_ppid;
+    pt[i].starttime = get_starttime() + (time_t)(stat_item_starttime / HZ);
+
+    /* jiffies -> seconds = 1 / HZ
+     * HZ is defined in "asm/param.h"  and it is usually 1/100s but on
+     * alpha system it is 1/1024s */
+    pt[i].cputime     = ((float)(stat_item_utime + stat_item_stime) * 10.0) / HZ;
+    pt[i].cpu_percent = 0;
+
+    /* State is Zombie -> then we are a Zombie ... clear or? (-: */
+    if (stat_item_state == 'Z')
+      pt[i].status_flag |= PROCESS_ZOMBIE;
+
+    if (page_shift_to_kb < 0)
+      pt[i].mem_kbyte = (stat_item_rss >> abs(page_shift_to_kb));
+    else
+      pt[i].mem_kbyte = (stat_item_rss << abs(page_shift_to_kb));
+
+    if (! read_proc_file(buf, sizeof(buf), "cmdline", pt[i].pid, &bytes)) {
+      DEBUG("system statistic error -- cannot read /proc/%d/cmdline\n", pt[i].pid);
+      continue;
+    }
+    /* The cmdline file contains argv elements/strings terminated separated by '\0' => join the string: */
+    for (j = 0; j < (bytes - 1); j++)
+      if (buf[j] == 0)
+        buf[j] = ' ';
+    pt[i].cmdline = *buf ? Str_dup(buf) : Str_dup(procname);
+  }
+
+  *reference = pt;
+  globfree(&globbuf);
+
+  return treesize;
+}
+
+
+/**
+ * This routine returns 'nelem' double precision floats containing
+ * the load averages in 'loadv'; at most 3 values will be returned.
+ * @param loadv destination of the load averages
+ * @param nelem number of averages
+ * @return: 0 if successful, -1 if failed (and all load averages are 0).
+ */
+int getloadavg_sysdep(double *loadv, int nelem) {
+#ifdef HAVE_GETLOADAVG
+        return getloadavg(loadv, nelem);
+#else
+        char buf[STRLEN];
+        double load[3];
+        if (! read_proc_file(buf, sizeof(buf), "loadavg", -1, NULL))
+                return -1;
+        if (sscanf(buf, "%lf %lf %lf", &load[0], &load[1], &load[2]) != 3) {
+                DEBUG("system statistic error -- cannot get load average\n");
+                return -1;
+        }
+        for (int i = 0; i < nelem; i++)
+                loadv[i] = load[i];
+        return 0;
+#endif
+}
+
+
+/**
+ * This routine returns kbyte of real memory in use.
+ * @return: TRUE if successful, FALSE if failed
+ */
+int used_system_memory_sysdep(SystemInfo_T *si) {
+  char          *ptr;
+  char           buf[1024];
+  unsigned long  mem_free = 0UL;
+  unsigned long  buffers = 0UL;
+  unsigned long  cached = 0UL;
+  unsigned long  swap_total = 0UL;
+  unsigned long  swap_free = 0UL;
+
+  if (! read_proc_file(buf, 1024, "meminfo", -1, NULL)) {
+    LogError("system statistic error -- cannot get real memory free amount\n");
+    goto error;
+  }
+
+  /* Memory */
+  if (! (ptr = strstr(buf, MEMFREE)) || sscanf(ptr + strlen(MEMFREE), "%ld", &mem_free) != 1) {
+    LogError("system statistic error -- cannot get real memory free amount\n");
+    goto error;
+  }
+  if (! (ptr = strstr(buf, MEMBUF)) || sscanf(ptr + strlen(MEMBUF), "%ld", &buffers) != 1)
+    DEBUG("system statistic error -- cannot get real memory buffers amount\n");
+  if (! (ptr = strstr(buf, MEMCACHE)) || sscanf(ptr + strlen(MEMCACHE), "%ld", &cached) != 1)
+    DEBUG("system statistic error -- cannot get real memory cache amount\n");
+  si->total_mem_kbyte = systeminfo.mem_kbyte_max - mem_free - buffers - cached;
+
+  /* Swap */
+  if (! (ptr = strstr(buf, SWAPTOTAL)) || sscanf(ptr + strlen(SWAPTOTAL), "%ld", &swap_total) != 1) {
+    LogError("system statistic error -- cannot get swap total amount\n");
+    goto error;
+  }
+  if (! (ptr = strstr(buf, SWAPFREE)) || sscanf(ptr + strlen(SWAPFREE), "%ld", &swap_free) != 1) {
+    LogError("system statistic error -- cannot get swap free amount\n");
+    goto error;
+  }
+  si->swap_kbyte_max   = swap_total;
+  si->total_swap_kbyte = swap_total - swap_free;
+
+  return TRUE;
+
+  error:
+  si->total_mem_kbyte = 0;
+  si->swap_kbyte_max = 0;
+  return FALSE;
+}
+
+
+/**
+ * This routine returns system/user CPU time in use.
+ * @return: TRUE if successful, FALSE if failed (or not available)
+ */
+int used_system_cpu_sysdep(SystemInfo_T *si) {
+  int                rv;
+  unsigned long long cpu_total;
+  unsigned long long cpu_user;
+  unsigned long long cpu_nice;
+  unsigned long long cpu_syst;
+  unsigned long long cpu_idle;
+  unsigned long long cpu_wait;
+  unsigned long long cpu_irq;
+  unsigned long long cpu_softirq;
+  char               buf[1024];
+
+  if (!read_proc_file(buf, 1024, "stat", -1, NULL)) {
+    LogError("system statistic error -- cannot read /proc/stat\n");
+    goto error;
+  }
+
+  rv = sscanf(buf, "cpu %llu %llu %llu %llu %llu %llu %llu",
+         &cpu_user,
+         &cpu_nice,
+         &cpu_syst,
+         &cpu_idle,
+         &cpu_wait,
+         &cpu_irq,
+         &cpu_softirq);
+  if (rv < 4) {
+    LogError("system statistic error -- cannot read cpu usage\n");
+    goto error;
+  } else if (rv == 4) {
+    /* linux 2.4.x doesn't support these values */
+    cpu_wait    = 0;
+    cpu_irq     = 0;
+    cpu_softirq = 0;
+  }
+
+  cpu_total = cpu_user + cpu_nice + cpu_syst + cpu_idle + cpu_wait + cpu_irq + cpu_softirq;
+  cpu_user  = cpu_user + cpu_nice;
+
+  if (old_cpu_total == 0) {
+    si->total_cpu_user_percent = -10;
+    si->total_cpu_syst_percent = -10;
+    si->total_cpu_wait_percent = -10;
+  } else {
+    unsigned long long delta = cpu_total - old_cpu_total;
+
+    si->total_cpu_user_percent = (int)(1000 * (double)(cpu_user - old_cpu_user) / delta);
+    si->total_cpu_syst_percent = (int)(1000 * (double)(cpu_syst - old_cpu_syst) / delta);
+    si->total_cpu_wait_percent = (int)(1000 * (double)(cpu_wait - old_cpu_wait) / delta);
+  }
+
+  old_cpu_user  = cpu_user;
+  old_cpu_syst  = cpu_syst;
+  old_cpu_wait  = cpu_wait;
+  old_cpu_total = cpu_total;
+  return TRUE;
+
+  error:
+  si->total_cpu_user_percent = 0;
+  si->total_cpu_syst_percent = 0;
+  si->total_cpu_wait_percent = 0;
+  return FALSE;
+}
+
+
