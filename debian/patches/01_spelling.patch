Description: Spelling fixes from lintian
Author: Sergey B Kirpichev <skirpichev@gmail.com>
Forwarded: no

---
 doc/monit.pod            |   10 +++++-----
 src/http/cervlet.c       |    8 ++++----
 src/protocols/memcache.c |    4 ++--
 src/protocols/radius.c   |    2 +-
 src/validate.c           |    6 +++---
 src/y.tab.c              |    2 +-
 6 files changed, 16 insertions(+), 16 deletions(-)

--- a/doc/monit.pod
+++ b/doc/monit.pod
@@ -796,7 +796,7 @@ B<ALLOW> option which is used to specify
 only specific clients to connect.
 
 If the Monit command line interface is being used, at least one
-cleartext password is necessary (see bellow), otherwise the Monit
+cleartext password is necessary (see below), otherwise the Monit
 command line interface will not be able to connect to the Monit
 web interface.
 
@@ -1232,7 +1232,7 @@ Multiple mail servers can be set by usin
 Monit cannot connect to the first server, it will try the next in
 the list and so on.
 
-The port statement allows to override the default SMTP port
+The port statement allows one to override the default SMTP port
 (465 for SSL, or 25 for TLS and non secure connection).
 
 Monit supports AUTH PLAIN and AUTH LOGIN for SMTP authentication.
@@ -1812,7 +1812,7 @@ events before switching the state:
     for 3 cycles
  then alert
 
-The second format is more advanced and allows to tolerate intermittent
+The second format is more advanced and allows one to tolerate intermittent
 issues, but still catch excessive problems, where the service is
 flapping between error and success states frequently.
 
@@ -2996,7 +2996,7 @@ For example:
 
 =head4 APACHE-STATUS
 
-The I<APACHE-STATUS> test allows to check server performance by examination
+The I<APACHE-STATUS> test allows one to check server performance by examination
 of the status page generated by Apache's mod_status, which is expected to be at
 its default address of http://www.example.com/server-status.
 
@@ -3529,7 +3529,7 @@ F<~/.monit.id>
 No environment variables are used by Monit. However, when Monit
 executes a start/stop/restart program or an exec action, it will
 set several environment variables which can be utilised by the
-executable to get informations about the event, which triggered
+executable to get information about the event, which triggered
 the action.
 
 The following environment variable is set for every program
--- a/src/protocols/memcache.c
+++ b/src/protocols/memcache.c
@@ -84,7 +84,7 @@ void check_memcache(Socket_T socket) {
                 THROW(IOException, "MEMCACHE: Received %d bytes from server, expected %d bytes", length, MEMCACHELEN);
 
         if (response[0] != MAGIC_RESPONSE)
-                THROW(IOException, "MEMCACHELEN: Invalid response code -- error occured");
+                THROW(IOException, "MEMCACHELEN: Invalid response code -- error occurred");
 
         status = (response[6] << 8) | response[7];
         switch (status ) {
@@ -112,7 +112,7 @@ void check_memcache(Socket_T socket) {
                         THROW(IOException, "MEMCACHELEN: Invalid response code -- Key exists");
                         break;
                 default:
-                        THROW(IOException, "MEMCACHELEN: Unknow response code %u -- error occured", status);
+                        THROW(IOException, "MEMCACHELEN: Unknown response code %u -- error occurred", status);
                         break;
         }
 }
--- a/src/protocols/radius.c
+++ b/src/protocols/radius.c
@@ -138,7 +138,7 @@ void check_radius(Socket_T socket) {
 
         /* compare the response code (should be Access-Accept or Accounting-Response) */
         if ((response[0] != 2) && (response[0] != 5))
-                THROW(IOException, "RADIUS: Invalid reply code -- error occured");
+                THROW(IOException, "RADIUS: Invalid reply code -- error occurred");
 
         /* compare the packet ID (it should be the same as in our request) */
         if (response[1] != 0x00)
--- a/src/validate.c
+++ b/src/validate.c
@@ -843,11 +843,11 @@ static State_Type _checkFilesystemFlags(
         if (s->inf->priv.filesystem._flags >= 0) {
                 if (s->inf->priv.filesystem._flags != s->inf->priv.filesystem.flags) {
                         for (Fsflag_T l = s->fsflaglist; l; l = l->next)
-                                Event_post(s, Event_Fsflag, State_Changed, l->action, "filesytem flags changed to %#x", s->inf->priv.filesystem.flags);
+                                Event_post(s, Event_Fsflag, State_Changed, l->action, "filesystem flags changed to %#x", s->inf->priv.filesystem.flags);
                         return State_Changed;
                 }
                 for (Fsflag_T l = s->fsflaglist; l; l = l->next)
-                        Event_post(s, Event_Fsflag, State_ChangedNot, l->action, "filesytem flags has not changed");
+                        Event_post(s, Event_Fsflag, State_ChangedNot, l->action, "filesystem flags has not changed");
                 return State_ChangedNot;
         }
         return State_Init;
@@ -1336,7 +1336,7 @@ State_Type check_program(Service_T s) {
                                 // Fall-through with P and evaluate exit value below.
                         } else {
                                 // Defer test of exit value until program exit or timeout
-                                DEBUG("'%s' status check defered - waiting on program to exit\n", s->name);
+                                DEBUG("'%s' status check deferred - waiting on program to exit\n", s->name);
                                 return State_Init;
                         }
                 }
--- a/src/http/cervlet.c
+++ b/src/http/cervlet.c
@@ -824,7 +824,7 @@ static void do_runtime(HttpRequest req,
 
 static void do_viewlog(HttpRequest req, HttpResponse res) {
         if (is_readonly(req)) {
-                send_error(req, res, SC_FORBIDDEN, "You do not have sufficent privileges to access this page");
+                send_error(req, res, SC_FORBIDDEN, "You do not have sufficient privileges to access this page");
                 return;
         }
         do_head(res, "_viewlog", "View log", 100);
@@ -871,7 +871,7 @@ static void handle_action(HttpRequest re
         const char *action = get_parameter(req, "action");
         if (action) {
                 if (is_readonly(req)) {
-                        send_error(req, res, SC_FORBIDDEN, "You do not have sufficent privileges to access this page");
+                        send_error(req, res, SC_FORBIDDEN, "You do not have sufficient privileges to access this page");
                         return;
                 }
                 Action_Type doaction = Util_getAction(action);
@@ -901,7 +901,7 @@ static void handle_do_action(HttpRequest
 
         if (action) {
                 if (is_readonly(req)) {
-                        send_error(req, res, SC_FORBIDDEN, "You do not have sufficent privileges to access this page");
+                        send_error(req, res, SC_FORBIDDEN, "You do not have sufficient privileges to access this page");
                         return;
                 }
                 if ((doaction = Util_getAction(action)) == Action_Ignored) {
@@ -940,7 +940,7 @@ static void handle_run(HttpRequest req,
         const char *action = get_parameter(req, "action");
         if (action) {
                 if (is_readonly(req)) {
-                        send_error(req, res, SC_FORBIDDEN, "You do not have sufficent privileges to access this page");
+                        send_error(req, res, SC_FORBIDDEN, "You do not have sufficient privileges to access this page");
                         return;
                 }
                 if (IS(action, "validate")) {
--- a/src/y.tab.c
+++ b/src/y.tab.c
@@ -4687,7 +4687,7 @@ yyreduce:
     {
                         if ((yyvsp[0].string)) {
                                 if (strlen((yyvsp[0].string)) > 16)
-                                        yyerror2("Username too long -- Maximum MySQL username lengh is 16 characters");
+                                        yyerror2("Username too long -- Maximum MySQL username length is 16 characters");
                                 else
                                         portset.parameters.mysql.username = (yyvsp[0].string);
                         }
